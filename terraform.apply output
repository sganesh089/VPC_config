terraform apply
var.project_id
  TEST creation

  Enter a value:


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_ec2_transit_gateway.main_tgw will be created
  + resource "aws_ec2_transit_gateway" "main_tgw" {
      + amazon_side_asn                    = 64512
      + arn                                = (known after apply)
      + association_default_route_table_id = (known after apply)
      + auto_accept_shared_attachments     = "disable"
      + default_route_table_association    = "enable"
      + default_route_table_propagation    = "enable"
      + description                        = "Transit Gateway for connecting multiple VPCs"
      + dns_support                        = "enable"
      + id                                 = (known after apply)
      + multicast_support                  = "disable"
      + owner_id                           = (known after apply)
      + propagation_default_route_table_id = (known after apply)
      + security_group_referencing_support = "disable"
      + tags                               = {
          + "Name" = "TEST-transit-gateway"
        }
      + tags_all                           = {
          + "Name" = "TEST-transit-gateway"
        }
      + vpn_ecmp_support                   = "enable"
    }

  # aws_ec2_transit_gateway_vpc_attachment.tgw_attachment will be created
  + resource "aws_ec2_transit_gateway_vpc_attachment" "tgw_attachment" {
      + appliance_mode_support                          = "disable"
      + arn                                             = (known after apply)
      + dns_support                                     = "enable"
      + id                                              = (known after apply)
      + ipv6_support                                    = "disable"
      + security_group_referencing_support              = (known after apply)
      + subnet_ids                                      = (known after apply)
      + tags                                            = {
          + "Name" = "TEST-TGW-Attachment"
        }
      + tags_all                                        = {
          + "Name" = "TEST-TGW-Attachment"
        }
      + transit_gateway_default_route_table_association = (known after apply)
      + transit_gateway_default_route_table_propagation = (known after apply)
      + transit_gateway_id                              = "tgw-037b6a9f775cfe121"
      + vpc_id                                          = (known after apply)
      + vpc_owner_id                                    = (known after apply)
    }

  # aws_eip.nat_eip[0] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # aws_eip.nat_eip[1] will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # aws_internet_gateway.main_igw will be created
  + resource "aws_internet_gateway" "main_igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "TEST-igw"
        }
      + tags_all = {
          + "Name" = "TEST-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_nat_gateway.nat_gateway[0] will be created
  + resource "aws_nat_gateway" "nat_gateway" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "TEST-nat-gw-1"
        }
      + tags_all                           = {
          + "Name" = "TEST-nat-gw-1"
        }
    }

  # aws_nat_gateway.nat_gateway[1] will be created
  + resource "aws_nat_gateway" "nat_gateway" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "TEST-nat-gw-2"
        }
      + tags_all                           = {
          + "Name" = "TEST-nat-gw-2"
        }
    }

  # aws_route_table.private_route_table[0] will be created
  + resource "aws_route_table" "private_route_table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "TEST-private-rt-1"
        }
      + tags_all         = {
          + "Name" = "TEST-private-rt-1"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.private_route_table[1] will be created
  + resource "aws_route_table" "private_route_table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + nat_gateway_id             = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "TEST-private-rt-2"
        }
      + tags_all         = {
          + "Name" = "TEST-private-rt-2"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.public_route_table[0] will be created
  + resource "aws_route_table" "public_route_table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "TEST-public-rt-1"
        }
      + tags_all         = {
          + "Name" = "TEST-public-rt-1"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.public_route_table[1] will be created
  + resource "aws_route_table" "public_route_table" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "TEST-public-rt-2"
        }
      + tags_all         = {
          + "Name" = "TEST-public-rt-2"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.private_subnet_association[0] will be created
  + resource "aws_route_table_association" "private_subnet_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.private_subnet_association[1] will be created
  + resource "aws_route_table_association" "private_subnet_association" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public_subnet_asso[0] will be created
  + resource "aws_route_table_association" "public_subnet_asso" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public_subnet_asso[1] will be created
  + resource "aws_route_table_association" "public_subnet_asso" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_subnet.private_subnets[0] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.50.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "TEST_Private Subnet 1"
        }
      + tags_all                                       = {
          + "Name" = "TEST_Private Subnet 1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.private_subnets[1] will be created
  + resource "aws_subnet" "private_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.50.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "TEST_Private Subnet 2"
        }
      + tags_all                                       = {
          + "Name" = "TEST_Private Subnet 2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public_subnets[0] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.50.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "TEST_Public Subnet 1"
        }
      + tags_all                                       = {
          + "Name" = "TEST_Public Subnet 1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public_subnets[1] will be created
  + resource "aws_subnet" "public_subnets" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.50.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "TEST_Public Subnet 2"
        }
      + tags_all                                       = {
          + "Name" = "TEST_Public Subnet 2"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main_vpc will be created
  + resource "aws_vpc" "main_vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.50.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "TEST-vpc-01"
        }
      + tags_all                             = {
          + "Name" = "TEST-vpc-01"
        }
    }

Plan: 20 to add, 0 to change, 0 to destroy.
╷
│ Warning: Argument is deprecated
│
│   with aws_eip.nat_eip,
│   on main.tf line 55, in resource "aws_eip" "nat_eip":
│   55:   vpc = true
│
│ vpc is deprecated. Use domain instead.
│
│ (and 2 more similar warnings elsewhere)
╵

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_eip.nat_eip[0]: Creating...
aws_eip.nat_eip[1]: Creating...
aws_ec2_transit_gateway.main_tgw: Creating...
aws_vpc.main_vpc: Creating...
aws_vpc.main_vpc: Creation complete after 2s [id=vpc-0e8ad05a0cef2c341]
aws_internet_gateway.main_igw: Creating...
aws_subnet.private_subnets[1]: Creating...
aws_subnet.private_subnets[0]: Creating...
aws_subnet.public_subnets[0]: Creating...
aws_subnet.public_subnets[1]: Creating...
aws_internet_gateway.main_igw: Creation complete after 1s [id=igw-0f33e2f636f08deff]
aws_subnet.public_subnets[0]: Creation complete after 1s [id=subnet-0c067e5ab1b66e999]
aws_subnet.private_subnets[0]: Creation complete after 1s [id=subnet-0614c3ecee073fb2b]
aws_route_table.public_route_table[0]: Creating...
aws_route_table.public_route_table[1]: Creating...
aws_subnet.private_subnets[1]: Creation complete after 1s [id=subnet-046a43f6beb3f42b4]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Creating...
aws_subnet.public_subnets[1]: Creation complete after 1s [id=subnet-0537a03ae05c696e1]
aws_route_table.public_route_table[0]: Creation complete after 1s [id=rtb-07f5bd803cf961347]
aws_route_table.public_route_table[1]: Creation complete after 1s [id=rtb-050bfd8a5a37bc7cb]
aws_route_table_association.public_subnet_asso[0]: Creating...
aws_route_table_association.public_subnet_asso[1]: Creating...
aws_route_table_association.public_subnet_asso[1]: Creation complete after 1s [id=rtbassoc-0ebf7d2ca858fa947]
aws_route_table_association.public_subnet_asso[0]: Creation complete after 1s [id=rtbassoc-0b2c8bc439059f52e]
aws_ec2_transit_gateway.main_tgw: Still creating... [10s elapsed]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Still creating... [10s elapsed]
aws_ec2_transit_gateway.main_tgw: Still creating... [20s elapsed]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Still creating... [20s elapsed]
aws_ec2_transit_gateway.main_tgw: Still creating... [30s elapsed]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Still creating... [30s elapsed]
aws_ec2_transit_gateway.main_tgw: Still creating... [40s elapsed]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Still creating... [40s elapsed]
aws_ec2_transit_gateway.main_tgw: Creation complete after 44s [id=tgw-03343cf4dfbf81c52]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Still creating... [50s elapsed]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Still creating... [1m0s elapsed]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Still creating... [1m10s elapsed]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Still creating... [1m20s elapsed]
aws_ec2_transit_gateway_vpc_attachment.tgw_attachment: Creation complete after 1m26s [id=tgw-attach-005f4a3405b03ee7c]
╷
│ Warning: Argument is deprecated
│
│   with aws_eip.nat_eip[0],
│   on main.tf line 55, in resource "aws_eip" "nat_eip":
│   55:   vpc = true
│
│ vpc is deprecated. Use domain instead.
│
│ (and one more similar warning elsewhere)
╵
╷
│ Error: creating EC2 EIP: operation error EC2: AllocateAddress, https response error StatusCode: 400, RequestID: a86039d3-e5db-427f-a18d-1dd61eaa8721, api error AddressLimitExceeded: The maximum number of addresses has been reached.
│
│   with aws_eip.nat_eip[0],
│   on main.tf line 53, in resource "aws_eip" "nat_eip":
│   53: resource "aws_eip" "nat_eip" {
│
╵
╷
│ Error: creating EC2 EIP: operation error EC2: AllocateAddress, https response error StatusCode: 400, RequestID: 842d3f32-7a50-468d-85eb-ba068541424e, api error AddressLimitExceeded: The maximum number of addresses has been reached.
│
│   with aws_eip.nat_eip[1],
│   on main.tf line 53, in resource "aws_eip" "nat_eip":
│   53: resource "aws_eip" "nat_eip" {
│
